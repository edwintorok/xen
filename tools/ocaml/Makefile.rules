META: META.in
	sed 's/@VERSION@/$(VERSION)/g' < $< $o

OCAML_SOURCES ?= $(wildcard *.ml *.mli)

# The sorted list of source files will be needed when linking
# dependencies need to be potentially regenerated whenever source changes:
# new dependencies might've been introduced
.ocamldep.make: $(OCAML_SOURCES) $(GENERATED_FILES)
	$(Q)echo -n "DEPSORTED_OCAML_SOURCES=" >$@.new
	$(Q)$(OCAMLDEP) -sort $^ >>$@.new
	$(Q)mv $@.new $@

ifndef IS_CLEAN_ONLY_GOAL
include .ocamldep.make
endif

MLI=$(filter %.mli,$(ALL_OCAML_SOURCES))
ML=$(filter %.ml,$(ALL_OCAML_SOURCES))

bin: all

libs: all

distclean clean: $(CLEAN_HOOKS)
	$(Q)rm -f .*.d *.o *.so *.a *.cmo *.cmi *.cma *.cmx *.cmxa *.annot *.spot *.spit $(LIBS) $(PROGRAMS) $(GENERATED_FILES) .ocamldep.make META

CSOURCES=$(wildcard *.c)
ifneq (,$(OCAML_PROGRAM))
$(OCAML_PROGRAM)_OBJS = $(OBJS)
$(OCAML_PROGRAM): $(CSOURCES:.c=.o)
endif

# do not embed -Wl,-rpath-link or -L into the .cmxa: this will be used out-of-tree too
ifneq (,$(OCAML_LIBRARY))
LIBS_$(OCAML_LIBRARY) ?= \
  $(foreach DEP,$(CDEPS_$(OCAML_LIBRARY)),\
    -l$(DEP)\
  )
endif

ifneq (,$(OCAML_PROGRAM))
OCAML_C_DEPS=$($(OCAML_PROGRAM)_C_DEPS)
# sort to eliminate duplicates and make the line shorter and more debuggable
LDFLAGS += $(sort $(foreach DEP,$(OCAML_C_DEPS),\
              $(SHDEPS_libxen$(DEP)) \
           ))
# -Wl,-rpath-link from SHDEPS is not enough we also need -L, otherwise linking
# xenevtchn will fail with 'DSO missing from command-line'
LDFLAGS += $(foreach DEP,$(OCAML_C_DEPS),\
            -L $(XEN_libxen$(DEP)) \
           )
OCAML_LIBS += $($(OCAML_PROGRAM)_LIBS)
OCAML_LIBS += $(foreach DEP,$($(OCAML_PROGRAM)_OCAML_DEPS),\
                -ccopt -L -ccopt $(OCAML_TOPLEVEL)/libs/$(DEP) \
                $(OCAML_TOPLEVEL)/libs/$(DEP)/$(DEP).cmxa)
endif

# avoid name clash between the C stub library and the Xen C library we link
# by default they would be libxenctrl.a and libxenctrl.so
# use -oc to change .a to be libxenctrl_stubs.a
all: $(ALL_OCAML_SOURCES) $(OCAML_TOPLEVEL)/Makefile.rules $(CSOURCES:.c=.o)
	$(OCAMLC) $(OCAMLFLAGS) -c $(MLI) $(ML)
	$(OCAMLOPT) $(OCAMLFLAGS) -c $(ML)
ifneq (,$(PACK_LIBRARY))
	$(OCAMLC) -pack -o $(PACK_LIBRARY).cmo $(ML:.ml=.cmo)
	$(OCAMLOPT) -pack -o $(PACK_LIBRARY).cmx $(ML:.ml=.cmx)
	$(OCAMLMKLIB) -verbose -o $(OCAML_LIBRARY) -oc $(OCAML_LIBRARY)_stubs $(PACK_LIBRARY).cmo $(PACK_LIBRARY).cmx $(filter %.o,$^) $(addprefix -cclib ,$(LIBS_$(OCAML_LIBRARY)))
else
ifneq (,$(OCAML_LIBRARY))
	$(OCAMLMKLIB) -verbose -o $(OCAML_LIBRARY) -oc $(OCAML_LIBRARY)_stubs $(ML:.ml=.cmo) $(ML:.ml=.cmx) $(filter %.o,$^) $(addprefix -cclib ,$(LIBS_$(OCAML_LIBRARY)))
endif
endif
ifneq (,$(OCAML_PROGRAM))
	$(OCAMLOPT) -verbose -o $(OCAML_PROGRAM) $(addprefix -ccopt ,$(LDFLAGS)) $(OCAML_LIBS) $(ML:.ml=.cmx) $(filter %.o,$^)
endif

ifneq (,$(OCAML_LIBRARY))
.PHONY: install
install: $(LIBS) META
	mkdir -p $(OCAMLDESTDIR)
	$(OCAMLFIND) remove -destdir $(OCAMLDESTDIR) $(OCAML_LIBRARY)
	$(OCAMLFIND) install -destdir $(OCAMLDESTDIR) -ldconf ignore $(OCAML_LIBRARY) META $(LIBS) $(OCAML_LIBRARY).cmo $(OCAML_LIBRARY).cmi $(OCAML_LIBRARY).cmx *.a *.so

.PHONY: uninstall
uninstall:
	$(OCAMLFIND) remove -destdir $(OCAMLDESTDIR) $(OCAML_LIBRARY)
endif
