.NOTPARALLEL:

ALL_OCAML_OBJS ?= $(OBJS)

%.cmo: %.ml
	$(OCAMLC) $(OCAMLFLAGS) -c -o $@ $<

%.cmi: %.mli
	$(OCAMLC) $(OCAMLFLAGS) -c -o $@ $<

%.cmx %.o: %.ml
	$(OCAMLOPT) $(OCAMLFLAGS) -c -o $@ $<

%.ml: %.mll
	$(OCAMLLEX) -q -o $@ $<

%.ml: %.mly
	$(OCAMLYACC) -q $<

%.o: %.c
	$(CC) $(CFLAGS) -c -o $@ $<

META: META.in
	sed 's/@VERSION@/$(VERSION)/g' < $< $o

ALL_OCAML_OBJ_SOURCES=$(addsuffix .ml, $(ALL_OCAML_OBJS))

# $o is defined in common.make and uses a tmpfile
.ocamldep.make: $(ALL_OCAML_OBJ_SOURCES) Makefile $(OCAML_TOPLEVEL)/Makefile.rules
	$(OCAMLDEP) $(ALL_OCAML_OBJ_SOURCES) *.mli $o

clean: $(CLEAN_HOOKS)
	rm -f .*.d *.o *.so *.a *.cmo *.cmi *.cma *.cmx *.cmxa *.annot *.spot *.spit $(LIBS) $(PROGRAMS) $(GENERATED_FILES) .ocamldep.make META

distclean: clean

mk-caml-lib-native = $(OCAMLOPT) -a -o $1 $2 $3
mk-caml-lib-bytecode = $(OCAMLC) -a -o $1 $2 $3

mk-caml-stubs = $(OCAMLMKLIB) -o `basename $1 .a` $2
mk-caml-lib-stubs = \
	$(AR) rcs $1 $2 && $(OCAMLMKLIB) -o `basename $1 .a | sed -e 's/^lib//'` $2

# define a library target <name>.cmxa and <name>.cma
define OCAML_LIBRARY_template
 $(1).cmxa: lib$(1)_stubs.a $(foreach obj,$($(1)_OBJS),$(obj).cmx)
	$(call mk-caml-lib-native,$$@, -cclib -l$(1)_stubs $(foreach lib,$(LIBS_$(1)),-cclib $(lib)), $(foreach obj,$($(1)_OBJS),$(obj).cmx))
 $(1).cma: $(foreach obj,$($(1)_OBJS),$(obj).cmo)
	$(call mk-caml-lib-bytecode,$$@, -dllib dll$(1)_stubs.so -cclib -l$(1)_stubs, $$+)
 $(1)_stubs.a: $(foreach obj,$$($(1)_C_OBJS),$(obj).o)
	$(call mk-caml-stubs,$$@, $$+)
 lib$(1)_stubs.a: $(foreach obj,$($(1)_C_OBJS),$(obj).o)
	$(call mk-caml-lib-stubs,$$@, $$+)
endef

define OCAML_NOC_LIBRARY_template
 $(1).cmxa: $(foreach obj,$($(1)_OBJS),$(obj).cmx)
	$(call mk-caml-lib-native,$$@, , $(foreach obj,$($(1)_OBJS),$(obj).cmx))
 $(1).cma: $(foreach obj,$($(1)_OBJS),$(obj).cmo)
	$(call mk-caml-lib-bytecode,$$@, , $$+)
endef

define OCAML_PROGRAM_template
 $(1): $(foreach obj,$($(1)_OBJS),$(obj).cmx) $($(1)_EXTRA_DEPS)
	$(OCAMLOPT) $(OCAMLFLAGS) -o $$@ $($(1)_LIBS) $$+
 $(1).byte: $(foreach obj,$($(1)_OBJS),$(obj).cmo)
	$(OCAMLC) $(OCAMLFLAGS) -o $$@ $($(1)_BYTE_LIBS) $$+
endef

define C_PROGRAM_template
 $(1): $(foreach obj,$($(1)_OBJS),$(obj).o)
	$(CC) $(LDFLAGS) -o $$@ $$+
endef

ifndef IS_CLEAN_ONLY_GOAL
include .ocamldep.make
endif

$(foreach lib,$(OCAML_LIBRARY),$(eval $(call OCAML_LIBRARY_template,$(lib))))
$(foreach lib,$(OCAML_NOC_LIBRARY),$(eval $(call OCAML_NOC_LIBRARY_template,$(lib))))
$(foreach p,$(OCAML_PROGRAM),$(eval $(call OCAML_PROGRAM_template,$(p))))
$(foreach p,$(C_PROGRAM),$(eval $(call C_PROGRAM_template,$(p))))
