XEN_ROOT = $(CURDIR)/../..
include $(XEN_ROOT)/tools/Rules.mk

SUBDIRS := libs
SUBDIRS += xenstored

ifeq ($(CONFIG_TESTS),y)
SUBDIRS += test
endif

.NOTPARALLEL:
# targets here must be run in order, otherwise we can try
# to build programs before the libraries are done

.PHONY: all
all: subdirs-all

.PHONY: install
install: subdirs-install

.PHONY: uninstall
uninstall: subdirs-uninstall

.PHONY: clean
clean: subdirs-clean

.PHONY: distclean
distclean: subdirs-distclean

.PHONY: build-tools-oxenstored
build-tools-oxenstored:
	$(MAKE) -s -C libs/eventchn
	$(MAKE) -s -C libs/mmap
	$(MAKE) -s -C libs/xb
	$(MAKE) -s -C libs/xc
	$(MAKE) -C xenstored

LIBRARY_PATH=$(XEN_libxenctrl):$(XEN_libxenguest):$(XEN_libxentoollog):$(XEN_libxencall):$(XEN_libxenevtchn):$(XEN_libxenforeignmemory):$(XEN_libxengnttab):$(XEN_libxendevicemodel):$(XEN_libxentoolcore)
C_INCLUDE_PATH=$(XEN_libxenctrl)/include:$(XEN_libxengnttab)/include:$(XEN_libxenevtchn)/include:$(XEN_libxentoollog)/include:$(XEN_INCLUDE)

# Files generated by the Makefile
# These cannot be generated from dune, because dune cannot refer to files
# in the parent directory (so it couldn't copy/use Config.mk)
.PHONY: dune-pre
dune-pre:
	$(MAKE) -s -C ../../ build-tools-public-headers
	$(MAKE) -s -C libs/xs paths.ml
	$(MAKE) -s -C libs/xc xenctrl_abi_check.h
	$(MAKE) -s -C xenstored paths.ml _paths.h

.PHONY: check
check: dune-pre
	# --force isn't necessary here if the test is deterministic
	OCAMLRUNPARAM=b C_INCLUDE_PATH=$(C_INCLUDE_PATH) dune runtest --profile=release --no-buffer --force

# Convenience targets for development

.PHONY: dune-clean
dune-clean:
	$(MAKE) clean
	dune clean

.PHONY: dune-syntax-check
dune-syntax-check: dune-pre
	LIBRARY_PATH=$(LIBRARY_PATH) C_INCLUDE_PATH=$(C_INCLUDE_PATH) dune build --profile=release @check

.PHONY: build-oxenstored-dune
dune-build-oxenstored: dune-pre
	LD_LIBRARY_PATH=$(LIBRARY_PATH) LIBRARY_PATH=$(LIBRARY_PATH) C_INCLUDE_PATH=$(C_INCLUDE_PATH) dune build --profile=release @all

.PHONY: oxenstored-fuzz1 oxenstored-fuzz
dune-oxenstored-fuzz: dune-pre
	# --force is needed, otherwise it would cache a successful run
	sh -c '. /etc/profile && C_INCLUDE_PATH=$(C_INCLUDE_PATH) dune build --profile=release --no-buffer --force @fuzz'

dune-oxenstored-fuzz1: dune-pre
	sh -c '. /etc/profile && C_INCLUDE_PATH=$(C_INCLUDE_PATH) dune build --profile=release --no-buffer --force @fuzz1'

.PHONY: container-fuzz
container-fuzz-sanity-test:
	dune clean
	podman build -t oxenstored-fuzz .
	# if UID is 0 then we get EPERM on setrlimit from inside the container
	# use containerize script which ensures that uid is not 0
	# (podman/docker run would get us a uid of 0)
	# Only do a sanity test with 1 core, actually doing fuzzing inside a container is a bad idea
	# due to FUSE overlayfs overhead
	CONTAINER=oxenstored-fuzz CONTAINER_NO_PULL=1 DOCKER_CMD=podman ../../automation/scripts/containerize make -C tools/ocaml dune-oxenstored-fuzz1
