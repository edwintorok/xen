XEN_ROOT = $(CURDIR)/../..
all: dune-all-check dune-cameleer-check

# Dune by default uses all available CPUs. Make doesn't.
# Query the available CPUs and use all available for any of the make rules we call out to.
# -O is also needed with parallel make such that the build error and the build command causing
#  the error are close together and not interspersed with other output
NPROC=$(shell getconf _NPROCESSORS_ONLN)
MAKEN=$(MAKE) -j$(NPROC) -O

# We want to link and use the Xen libraries built locally
# without installing them system-wide
# (the system-wide one installed from packages will likely be too old and not match the locally
# built one anyway).
#
# Set LIBRARY_PATH and LD_LIBRARY_PATH so that the linker
# finds the proper libraries and the various dune commands
# work (e.g. running tests, utop, etc.).
#
# The Makefile based buildsystem would use -Wl,-rpath-link= here,
# but that only works during linking, not runtime.
# There is a -Wl, -rpath= that can be used, but that only works
# for libraries linked directly to the main executable:
# the dependencies of those libraries won't get found on the rpath
# (the rpath of the executable is apparently not used during that search).
#
# Use environment variables, because that way we don't make any permanent alternations (rpath)
# to the executable, so once installed system-wide it won't refer to build paths anymore.
#
# Dune cannot be used to generate this file: the env-vars stanza doesn't support %{read:}, :include,
# and dune-workspace doesn't support (include) stanzas.
# So for now generate it from this Makefile
# Cannot start with comment, so add auto-generated comment at the end
LIB_DIRS=$(abspath $(wildcard ../libs/*/.))
LIBRARY_PATH=$(subst $(eval) ,:,$(LIB_DIRS))
../dune-workspace ../dune-workspace.dev: dune-workspace.in dune-workspace.dev.in Makefile.dune
	@( sed -e "s|@LIBRARY_PATH@|$(LIBRARY_PATH)|" <$< \
	&& echo "; DO NOT EDIT: autogenerated from ocaml/dune-workspace.in") >../dune-workspace
	@cat ../dune-workspace dune-workspace.dev.in >../dune-workspace.dev

# for location of various libs which moves between Xen versions
include $(XEN_ROOT)/tools/Rules.mk

XEN_DEPS=$(XEN_libxenctrl)/libxenctrl.so
XEN_DEPS+=$(XEN_libxenevtchn)/libxenevtchn.so
XEN_DEPS+=$(XEN_libxenguest)/libxenguest.so

# Cannot be generated from dune
# Tell the user how to generate them
../include/xen/xen.h ../config.status $(XEN_DEPS):
	echo "Missing C headers or libraries" >&2
	echo "Run make -C $(XEN_ROOT) build-tools-oxenstored-prepare -j$$(nproc)" >&2
	exit 1

# dune would refuse to run if there are build artifacts in the source directory
# if we detect anything then run make clean to ensure these are removed
# don't always call 'make clean' because it takes ~1.6s
.PHONY: dune-pre dune-syntax-check dune-all-check dune-cameleer-check check dune-oxenstored dune-install dune-uninstall
dune-pre: ../config.status | ../include/xen/xen.h ../dune-workspace $(XEN_DEPS)
	$(MAKEN) clean -s

# Convenience targets
dune-syntax-check: dune-pre
	dune build @check

dune-all-check: dune-pre ../dune-workspace.dev
	# Test build with multiple compiler versions
	# requires opam switches for each to be already installed
	dune build --workspace=../dune-workspace.dev @check @install @runtest

dune-cameleer-check:
	opam exec --switch=cameleer dune build @cameleer-check

check: dune-pre
	dune runtest --no-buffer

# approximatively equivalent to Dune 3.0 --release mode
dune-oxenstored: dune-pre
	dune build --root .. --ignore-promoted-rules --no-config \
           --profile release --always-show-command-line \
           --promote-install-files --default-target @install

-include $(XEN_ROOT)/config/Paths.mk

# skip doc, it'd install an extra LICENSE file that is already installed by other rules
INSTALL_SECTIONS=bin,etc,lib,sbin
dune-install: dune-oxenstored
	dune install --destdir=$(DESTDIR) --prefix=$(prefix) --libdir=$(shell ocamlfind printconf destdir) --mandir=$(mandir) --etcdir=$(sysconfdir) --docdir=$(docdir) --sections=$(INSTALL_SECTIONS)

dune-uninstall: dune-oxenstored
	dune uninstall --destdir=$(DESTDIR) --prefix=$(prefix) --libdir=$(shell ocamlfind printconf destdir) --mandir=$(mandir) --etcdir=$(sysconfdir) --docdir=$(docdir)
